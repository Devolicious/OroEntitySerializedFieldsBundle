<?php

namespace Oro\Bundle\EntitySerializedFieldsBundle\Grid;

use Oro\Bundle\DataGridBundle\Datagrid\Common\DatagridConfiguration;
use Oro\Bundle\DataGridBundle\Datagrid\DatagridGuesser;
use Oro\Bundle\DataGridBundle\Datasource\DatasourceInterface;
use Oro\Bundle\EntityConfigBundle\Config\Id\FieldConfigId;
use Oro\Bundle\EntityExtendBundle\EntityConfig\ExtendScope;

use Oro\Bundle\EntityExtendBundle\Grid\AbstractFieldsExtension;
use Oro\Bundle\EntityExtendBundle\Grid\DynamicFieldsExtension;

class SerializedFieldsExtension extends DynamicFieldsExtension
{
    //const EXTEND_ENTITY_CONFIG_PATH = '[extended_entity_name]';

    /**
     * {@inheritdoc}
     */
    public function isApplicable(DatagridConfiguration $config)
    {
        return parent::isApplicable($config);
            //&& $config->offsetGetByPath(self::EXTEND_ENTITY_CONFIG_PATH, false) !== false;
    }

    /**
     * {@inheritdoc}
     */
//    protected function getEntityName(DatagridConfiguration $config)
//    {
//        return parent::getEntityName($config);
//    }

    /**
     * {@inheritdoc}
     */
//    protected function getFields(DatagridConfiguration $config)
//    {
//        return parent::getFields($config);
//    }

//    /**
//     * {@inheritdoc}
//     */
//    protected function getFields(DatagridConfiguration $config)
//    {
//        $entityClassName = $this->entityClassResolver->getEntityClass($this->getEntityName($config));
//        if (!$this->configManager->hasConfig($entityClassName)) {
//            return [];
//        }
//
//        $entityConfigProvider   = $this->configManager->getProvider('entity');
//        $extendConfigProvider   = $this->configManager->getProvider('extend');
//        $datagridConfigProvider = $this->configManager->getProvider('datagrid');
//
//        $fields   = [];
//        $fieldIds = $entityConfigProvider->getIds($entityClassName);
//        foreach ($fieldIds as $fieldId) {
//            $extendConfig = $extendConfigProvider->getConfigById($fieldId);
//            if ($extendConfig->is('owner', ExtendScope::OWNER_CUSTOM)
//                && $datagridConfigProvider->getConfigById($fieldId)->is('is_visible')
//                && !$extendConfig->is('state', ExtendScope::STATE_NEW)
//                && !$extendConfig->is('is_deleted')
//            ) {
//                $fields[] = $fieldId;
//            }
//        }
//
//        return $fields;
//    }

    /**
     * {@inheritdoc}
     */
    protected function prepareColumnOptions(FieldConfigId $field, array &$columnOptions)
    {
        $a = 0;

        parent::prepareColumnOptions($field, $columnOptions);

        $a = 1;


//        if ($this->getFieldConfig('datagrid', $field)->is('show_filter')) {
//            $columnOptions[DatagridGuesser::FILTER]['enabled'] = true;
//        }
    }

    public function visitDatasource(DatagridConfiguration $config, DatasourceInterface $datasource)
    {
        $a = 1;
        return parent::visitDatasource($config, $datasource); // TODO: Change the autogenerated stub

        /* * @var QueryBuilder $qb * /
        $qb        = $datasource->getQueryBuilder();
        $fromParts = $qb->getDQLPart('from');
        $alias     = false;

        / ** @var From $fromPart * /
        foreach ($fromParts as $fromPart) {
            if ($this->entityClassResolver->getEntityClass($fromPart->getFrom()) == $entityClassName) {
                $alias = $fromPart->getAlias();
            }
        }

        if ($alias === false) {
            // add entity if it not exists in from clause
            $alias = 'o';
            $qb->from($entityClassName, $alias);
        }*/


//        $extendConfigProvider = $this->configManager->getProvider('extend');
//        $extendConfig = $extendConfigProvider->getConfig($entityClassName);
//        if ($extendConfig->is('is_extend')) {
//            $fields = array_filter(
//                $fields,
//                function (FieldConfigId $field) use ($extendConfigProvider, $entityClassName) {
//                    $fieldConfig = $extendConfigProvider->getConfig($entityClassName, $field->getFieldName());
//                    return !($fieldConfig->has('is_serialized') && $fieldConfig->is('is_serialized'));
//                }
//            );
//
//            $qb->addSelect(sprintf('%s.%s', $alias, 'serialized_data'));
//        }
    }
}
